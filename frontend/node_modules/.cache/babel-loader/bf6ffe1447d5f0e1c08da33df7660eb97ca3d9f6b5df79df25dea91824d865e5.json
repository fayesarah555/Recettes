{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport produce from \"immer\";\nimport { fetchRecettes } from './recetteAPI';\nexport let Statuses = /*#__PURE__*/function (Statuses) {\n  Statuses[\"Initial\"] = \"Not Fetched\";\n  Statuses[\"Loading\"] = \"Loading...\";\n  Statuses[\"UpToDate\"] = \"Up To Date\";\n  Statuses[\"Deleted\"] = \"Deleted\";\n  Statuses[\"Error\"] = \"Error\";\n  return Statuses;\n}({});\nconst initialState = {\n  recettes: [{\n    id: 0,\n    titre: \"\",\n    ingredients: \"\",\n    created_at: \"\",\n    updated_at: \"\"\n  }],\n  status: Statuses.Initial\n};\nexport const fetchRecettesAsync = createAsyncThunk('recettes/fetchRecettes', async () => {\n  const response = await fetchRecettes();\n  return response;\n});\nexport const recetteSlice = createSlice({\n  name: \"recettes\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchRecettesAsync.pending, state => {\n      return produce(state, draftState => {\n        draftState.status = Statuses.Loading;\n      });\n    }).addCase(fetchRecettesAsync.fulfilled, (state, action) => {\n      return produce(state, draftState => {\n        draftState.recettes.push(action.payload);\n        draftState.status = Statuses.UpToDate;\n      });\n    }).addCase(fetchRecettesAsync.rejected, state => {\n      return produce(state, draftState => {\n        draftState.status = Statuses.Error;\n      });\n    });\n  }\n});\nexport const {} = recetteSlice.actions;\nexport const selectRecettes = state => state.recettes.recettes;\nexport const selectStatus = state => state.recettes.status;\nexport default recetteSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","produce","fetchRecettes","Statuses","initialState","recettes","id","titre","ingredients","created_at","updated_at","status","Initial","fetchRecettesAsync","response","recetteSlice","name","reducers","extraReducers","builder","addCase","pending","state","draftState","Loading","fulfilled","action","push","payload","UpToDate","rejected","Error","actions","selectRecettes","selectStatus","reducer"],"sources":["/home/saf/recepies/react-crud-rails/frontend/src/features/recettes/recetteSlice.tsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport produce from \"immer\";\nimport { RootState } from \"../../app/store\"\nimport { fetchRecettes } from './recetteAPI';\n\nexport enum Statuses {\n    Initial = \"Not Fetched\",\n    Loading = \"Loading...\",\n    UpToDate = \"Up To Date\",\n    Deleted = \"Deleted\",\n    Error = \"Error\"\n}\n\nexport interface RecetteState {\n            id?:number,\n            titre?:string,\n            ingredients?:string,\n            created_at?: any,\n            updated_at?: any,\n}\n\nexport interface RecettesState {\n    recettes: RecetteState[];\n    status: string;\n}\n\nconst initialState: RecettesState = {\n    recettes: [\n        {\n            id: 0,\n            titre: \"\",\n            ingredients: \"\",\n            created_at: \"\",\n            updated_at: \"\",\n        }\n    ],\n    status: Statuses.Initial\n}\n\n\nexport const fetchRecettesAsync = createAsyncThunk(\n    'recettes/fetchRecettes',\n    async () => {\n        const response = await fetchRecettes();\n        return response;\n    }\n)\n\n\nexport const recetteSlice = createSlice({\n    name: \"recettes\",\n    initialState,\n    reducers: {},\n    extraReducers: (builder) => {\n        builder\n        .addCase(fetchRecettesAsync.pending, (state) => {\n            return produce(state, (draftState) => {\n                draftState.status = Statuses.Loading;\n            })\n        })\n        .addCase(fetchRecettesAsync.fulfilled, (state, action) => {\n            return produce(state, (draftState) => {\n                draftState.recettes.push(action.payload);\n                draftState.status = Statuses.UpToDate;\n            })\n        }) \n        .addCase (fetchRecettesAsync.rejected, (state) => {\n            return produce(state, (draftState) => {\n                draftState.status = Statuses.Error;\n            })\n        })\n    }\n\n})    \n\nexport const {} = recetteSlice.actions;\n\nexport const selectRecettes = (state: RootState) => state.recettes.recettes;\n\nexport const selectStatus = (state: RootState) => state.recettes.status;\n\nexport default recetteSlice.reducer;"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,OAAOC,OAAO,MAAM,OAAO;AAE3B,SAASC,aAAa,QAAQ,cAAc;AAE5C,WAAYC,QAAQ,0BAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAARA,QAAQ;EAAA,OAARA,QAAQ;AAAA;AAqBpB,MAAMC,YAA2B,GAAG;EAChCC,QAAQ,EAAE,CACN;IACIC,EAAE,EAAE,CAAC;IACLC,KAAK,EAAE,EAAE;IACTC,WAAW,EAAE,EAAE;IACfC,UAAU,EAAE,EAAE;IACdC,UAAU,EAAE;EAChB,CAAC,CACJ;EACDC,MAAM,EAAER,QAAQ,CAACS;AACrB,CAAC;AAGD,OAAO,MAAMC,kBAAkB,GAAGd,gBAAgB,CAC9C,wBAAwB,EACxB,YAAY;EACR,MAAMe,QAAQ,GAAG,MAAMZ,aAAa,CAAC,CAAC;EACtC,OAAOY,QAAQ;AACnB,CACJ,CAAC;AAGD,OAAO,MAAMC,YAAY,GAAGf,WAAW,CAAC;EACpCgB,IAAI,EAAE,UAAU;EAChBZ,YAAY;EACZa,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IACxBA,OAAO,CACNC,OAAO,CAACP,kBAAkB,CAACQ,OAAO,EAAGC,KAAK,IAAK;MAC5C,OAAOrB,OAAO,CAACqB,KAAK,EAAGC,UAAU,IAAK;QAClCA,UAAU,CAACZ,MAAM,GAAGR,QAAQ,CAACqB,OAAO;MACxC,CAAC,CAAC;IACN,CAAC,CAAC,CACDJ,OAAO,CAACP,kBAAkB,CAACY,SAAS,EAAE,CAACH,KAAK,EAAEI,MAAM,KAAK;MACtD,OAAOzB,OAAO,CAACqB,KAAK,EAAGC,UAAU,IAAK;QAClCA,UAAU,CAAClB,QAAQ,CAACsB,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;QACxCL,UAAU,CAACZ,MAAM,GAAGR,QAAQ,CAAC0B,QAAQ;MACzC,CAAC,CAAC;IACN,CAAC,CAAC,CACDT,OAAO,CAAEP,kBAAkB,CAACiB,QAAQ,EAAGR,KAAK,IAAK;MAC9C,OAAOrB,OAAO,CAACqB,KAAK,EAAGC,UAAU,IAAK;QAClCA,UAAU,CAACZ,MAAM,GAAGR,QAAQ,CAAC4B,KAAK;MACtC,CAAC,CAAC;IACN,CAAC,CAAC;EACN;AAEJ,CAAC,CAAC;AAEF,OAAO,MAAM,CAAC,CAAC,GAAGhB,YAAY,CAACiB,OAAO;AAEtC,OAAO,MAAMC,cAAc,GAAIX,KAAgB,IAAKA,KAAK,CAACjB,QAAQ,CAACA,QAAQ;AAE3E,OAAO,MAAM6B,YAAY,GAAIZ,KAAgB,IAAKA,KAAK,CAACjB,QAAQ,CAACM,MAAM;AAEvE,eAAeI,YAAY,CAACoB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}